{"version":3,"file":"static/js/160.a0b95a25.chunk.js","mappings":"6QAWe,SAASA,EAAOC,GAC7B,IAAQC,EAA2CD,EAA3CC,SAAUC,EAAiCF,EAAjCE,YAAaC,EAAoBH,EAApBG,MAAOC,EAAaJ,EAAbI,SACtC,GAA4BC,EAAAA,EAAAA,YAA5B,eACA,GADA,WACwBA,EAAAA,EAAAA,WAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KASA,OACE,iBAAKC,UAAS,2BAAsBF,EAAO,GAAK,aAAhD,WACE,iBAAKE,UAAU,eAAf,UACGN,GACD,mBACEO,KAAK,SACLD,UAAU,sBACVE,QAAS,kBAAMH,GAAQ,SAACI,GAAD,OAAeA,MAHxC,UAKE,SAAC,IAAD,CAAiBC,KAAMN,EAAOO,EAAAA,IAAgBC,EAAAA,YAGlD,SAAC,KAAD,CACEC,eApBN,SAAsBC,EAAQC,EAAMd,GAClCC,EAASD,GACTe,OAAOC,WAAa,SAAUC,GAC5BF,OAAOG,QAAQC,IAAI,KAkBjBnB,MAAOA,EACPK,UAAU,sBACVe,QAAS,CACPC,cAAc,EACdC,YAAa,CAAEC,OAAO,GACtBC,MAAM,EACNC,KAAM3B,EACN4B,MAAO,WACPC,aAAa,U,sBC/BpB,SAAUC,GACX,aAWA,SAASC,EAAeC,EAAIC,GAC1B,SAASC,IACHF,EAAGG,QAAQC,QAAQC,cACrBC,EAAcN,EAAIC,GACdD,EAAGG,QAAQI,gBAAkBP,EAAGG,QAAQC,QAAQI,cAClDR,EAAGS,WAELR,EAAMS,QAAUC,WAAWT,EAAOD,EAAMW,OAG5CX,EAAMS,QAAUC,WAAWT,EAAOD,EAAMW,OACxCX,EAAMY,MAAQ,WACZC,aAAab,EAAMS,SACnBT,EAAMS,QAAUC,WAAWT,EAAO,KAEpCJ,EAAWiB,GAAG9B,OAAQ,UAAWgB,EAAMY,OACvCf,EAAWiB,GAAG9B,OAAQ,QAASgB,EAAMY,OAGvC,SAASP,EAAcU,EAAKf,GAC1Ba,aAAab,EAAMS,SACnBZ,EAAWmB,IAAIhC,OAAQ,UAAWgB,EAAMY,OACxCf,EAAWmB,IAAIhC,OAAQ,QAASgB,EAAMY,OA/BxCf,EAAWoB,aAAa,eAAe,GAAO,SAAUlB,EAAImB,GACtDnB,EAAGC,MAAMT,cACXc,EAAcN,EAAIA,EAAGC,MAAMT,aAC3BQ,EAAGC,MAAMT,YAAc,MAErB2B,IAAQA,EAAI1B,OAA4C,GAAnCO,EAAGG,QAAQC,QAAQC,eAC1CN,EAAeC,EAAKA,EAAGC,MAAMT,YAAc,CAAEoB,MAAOO,EAAIP,OAAS,SAVrEQ,CAAIC,EAAQ","sources":["Questions/QuestionList/Editor.js","Questions/QuestionList/autorefresh.ext.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"codemirror/lib/codemirror.css\";\nimport \"codemirror/theme/material.css\";\nimport \"codemirror/mode/xml/xml\";\nimport \"codemirror/mode/javascript/javascript\";\nimport \"codemirror/mode/css/css\";\nimport { Controlled as ControlledEditor } from \"react-codemirror2\";\nimport \"./autorefresh.ext\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCompressAlt, faExpandAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nexport default function Editor(props) {\n  const { language, displayName, value, onChange } = props;\n  const [editor, setEditor] = useState();\n  const [open, setOpen] = useState(true);\n\n  function handleChange(editor, data, value) {\n    onChange(value);\n    window.onpopstate = function (event) {\n      window.history.go(-1);\n    };\n  }\n\n  return (\n    <div className={`editor-container ${open ? \"\" : \"collapsed\"}`}>\n      <div className=\"editor-title\">\n        {displayName}\n        <button\n          type=\"button\"\n          className=\"expand-collapse-btn\"\n          onClick={() => setOpen((prevOpen) => !prevOpen)}\n        >\n          <FontAwesomeIcon icon={open ? faCompressAlt : faExpandAlt} />\n        </button>\n      </div>\n      <ControlledEditor\n        onBeforeChange={handleChange}\n        value={value}\n        className=\"code-mirror-wrapper\"\n        options={{\n          lineWrapping: true,\n          autoRefresh: { force: true },\n          lint: true,\n          mode: language,\n          theme: \"material\",\n          lineNumbers: true,\n        }}\n      />\n    </div>\n  );\n}\n","/**\n * extends codemirror/addon/display/autorefresh\n *\n * @author Yuki Takei <yuki@weseek.co.jp>\n * @see https://codemirror.net/addon/display/autorefresh.js\n * @see https://github.com/scniro/react-codemirror2/issues/83#issuecomment-398825212\n */\n/* eslint-disable */\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function (mod) {\n  mod(require(\"codemirror\"));\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineOption(\"autoRefresh\", false, function (cm, val) {\n    if (cm.state.autoRefresh) {\n      stopListening(cm, cm.state.autoRefresh);\n      cm.state.autoRefresh = null;\n    }\n    if (val && (val.force || cm.display.wrapper.offsetHeight == 0))\n      startListening(cm, (cm.state.autoRefresh = { delay: val.delay || 250 }));\n  });\n\n  function startListening(cm, state) {\n    function check() {\n      if (cm.display.wrapper.offsetHeight) {\n        stopListening(cm, state);\n        if (cm.display.lastWrapHeight != cm.display.wrapper.clientHeight)\n          cm.refresh();\n      } else {\n        state.timeout = setTimeout(check, state.delay);\n      }\n    }\n    state.timeout = setTimeout(check, state.delay);\n    state.hurry = function () {\n      clearTimeout(state.timeout);\n      state.timeout = setTimeout(check, 50);\n    };\n    CodeMirror.on(window, \"mouseup\", state.hurry);\n    CodeMirror.on(window, \"keyup\", state.hurry);\n  }\n\n  function stopListening(_cm, state) {\n    clearTimeout(state.timeout);\n    CodeMirror.off(window, \"mouseup\", state.hurry);\n    CodeMirror.off(window, \"keyup\", state.hurry);\n  }\n});\n"],"names":["Editor","props","language","displayName","value","onChange","useState","open","setOpen","className","type","onClick","prevOpen","icon","faCompressAlt","faExpandAlt","onBeforeChange","editor","data","window","onpopstate","event","history","go","options","lineWrapping","autoRefresh","force","lint","mode","theme","lineNumbers","CodeMirror","startListening","cm","state","check","display","wrapper","offsetHeight","stopListening","lastWrapHeight","clientHeight","refresh","timeout","setTimeout","delay","hurry","clearTimeout","on","_cm","off","defineOption","val","mod","require"],"sourceRoot":""}